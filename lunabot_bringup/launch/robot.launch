<?xml version="1.0"?>
<launch>
    <arg name="autonomy" default="false" />
    <arg name="record" default="true" />
    <arg name="teensy" default="true" />
    <arg name="cameras" default="true" />
    <arg name="overhead" default="true" />
    <arg name="slam" default="true" />
    <arg name="exp_name" default="exp" />
    <arg name="lidar" default="true" />


    <node if="$(arg teensy)" name="teensy_driver" pkg="lunabot_embedded" type="teensy_driver_node"
        output="screen" />

    <include if="$(arg cameras)" file="$(find lunabot_perception)/launch/cameras.launch" />

    <include if="$(arg overhead)" file="$(find lunabot_bringup)/launch/overhead.launch" />
    <include if="$(arg record)" file="$(find lunabot_bringup)/launch/record.launch">
        <arg name="exp_name" value="$(arg exp_name)" />
    </include>

    <include if="$(arg lidar)" file="$(find lunabot_perception)/launch/lidar.launch" />

    <group if="$(arg autonomy)">

        <arg name="strategy" default="1" />
        <arg name="feature" default="6" />
        <arg name="nn" default="3" />
        <arg name="max_depth" default="4.0" />
        <arg name="min_inliers" default="20" />
        <arg name="inlier_distance" default="0.02" />
        <arg name="local_map" default="1000" />
        <arg name="odom_info_data" default="true" />
        <arg name="wait_for_transform" default="true" />


        <group>
            <include if="$(arg slam)" file="$(find rtabmap_ros)/launch/rtabmap.launch">
                <arg name="rtabmap_args" value="--delete_db_on_start" />
                <arg name="rgbd_sync" value="true" />
                <arg name="subscribe_rgbd" value="false" />
                <arg name="depth_topic" value="/d455_back/camera/aligned_depth_to_color/image_raw" />
                <arg name="rgb_topic" value="/d455_back/camera/color/image_rect_color" />
                <arg name="camera_info_topic" value="/d455_back/camera/color/camera_info" />
                <arg name="scan_cloud_topic" value="/pointcloud/combined_cloud" />
                <arg name="subscribe_scan_cloud" value="true" />
                <arg name="rtabmapviz" value="false" />
                <arg name="imu_topic" value="/imu" />
                <arg name="frame_id" value="base_link" />
                <arg name="rviz" value="false" />
            </include>

            <!-- <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager"
            output="screen" />

            <node ns="front" pkg="nodelet" type="nodelet" name="passthrough"
                args="load pcl/PassThrough /pcl_manager" output="screen">
                <remap from="~input" to="/d455_front/camera/depth/color/points" />
                <rosparam>
                    filter_field_name: y
                    filter_limit_min: 0.01
                    filter_limit_max: 1.5
                    filter_limit_negative: False
                </rosparam>
            </node>

            <node ns="back" pkg="nodelet" type="nodelet" name="passthrough"
                args="load pcl/PassThrough /pcl_manager" output="screen">
                <remap from="~input" to="/d455_back/camera/depth/color/points" />
                <rosparam>
                    filter_field_name: y
                    filter_limit_min: 0.01
                    filter_limit_max: 1.5
                    filter_limit_negative: False
                </rosparam>
            </node> -->

            <node ns="pointcloud" pkg="nodelet" type='nodelet' name="point_cloud_aggregator"
                args="standalone rtabmap_util/point_cloud_aggregator">
                <remap from="cloud1" to="/back/obstacles" />
                <remap from="cloud2" to="/front/obstacles" />
                <remap from="cloud3" to="/lidar_cloud" />
                <param name="fixed_frame_id" value="base_link" />

            </node>

            <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
            <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
            <node ns="front" pkg="nodelet" type="nodelet" name="voxel_grid"
                args="load pcl/VoxelGrid /pcl_manager" output="screen">
                <remap from="~input" to="/d455_front/camera/depth/color/points" />
                <rosparam>
                    filter_field_name: z
                    filter_limit_min: 0.65
                    filter_limit_max: 5.5
                    filter_limit_negative: False
                    leaf_size: 0.01
                </rosparam>
            </node>
            <node ns="back" pkg="nodelet" type="nodelet" name="voxel_grid"
                args="load pcl/VoxelGrid /pcl_manager" output="screen">
                <remap from="~input" to="/d455_back/camera/depth/color/points" />
                <rosparam> 
                    filter_field_name: z 
                    filter_limit_min: 0.65
                    filter_limit_max: 5.5
                    filter_limit_negative: False 
                    leaf_size: 0.01 </rosparam>
            </node>

            <node pkg="nodelet" type="nodelet" name="obstacles_manager" args="manager" />
            <node pkg="nodelet" ns="front" type="nodelet" name="obstacles_detection"
                args="load rtabmap_util/obstacles_detection /obstacles_manager">
                <remap from="cloud" to="/front/voxel_grid/output" />

                <param name="frame_id" type="string" value="d455_back_link" />
                <param name="min_cluster_size" type="int" value="20" />
                <param name="max_obstacles_height" type="double" value="0.0" />
            </node>

            <node pkg="nodelet" ns="back" type="nodelet" name="obstacles_detection"
                args="load rtabmap_util/obstacles_detection /obstacles_manager">
                <remap from="cloud" to="/back/voxel_grid/output" />

                <param name="frame_id" type="string" value="d455_front_link" />
                <param name="min_cluster_size" type="int" value="20" />
                <param name="max_obstacles_height" type="double" value="0.0" />
            </node>


        </group>

        <node pkg="lunabot_control" type="effort_factory.py" name="effort_factory" output="screen" />

        <node pkg="lunabot_control" type="differential_drive_controller.py"
            name="differential_drive_controller" output="screen" />

        <group ns="nav">
            <node pkg="lunabot_control" type="mpc_node" name="mpc_node" output="screen" />

            <node name="global_planner_node" pkg="lunabot_nav" type="dstar_node.py" output="screen"
                respawn="true">
                <!-- <rosparam file="$(find lunabot_config)/config/rrtstar.yml" command="load"/> -->
            </node>
        </group>

        <group ns="maps">
            <node name="costmap_node" pkg="lunabot_perception" type="costmap_node" output="screen">
                <rosparam file="$(find lunabot_config)/config/global_costmap.yml" command="load"
                    ns="global_costmap" />
            </node>
        </group>

    </group>
</launch>