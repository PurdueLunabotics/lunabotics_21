#!/usr/bin/env python3
import rospy
import numpy as np

from geometry_msgs.msg import PoseStamped, TwistStamped
from nav_msgs.msg import OccupancyGrid, Odometry, Path

from mpc import MPC

def main():
    rospy.init_node("mpc_node")

    robot_h, robot_w = 1, 0.5
    footprint = np.array(
        [
            (robot_h * x * 0.5, robot_w * y * 0.5)
            for x, y in [(1, 1), (-1, 1), (1, -1), (-1, -1)]
        ]
    )

    freq = 50
    sleep = rospy.Rate(freq)
    mpc = MPC(100,100,1,1,1,1,1000,5,1.0/freq,footprint,robot_w,robot_h)

    rospy.Subscriber("/projected_map", OccupancyGrid, mpc.update_grid)
    rospy.Subscriber("/odom", Odometry, mpc.update_robot_pos)
    rospy.Subscriber("/goal", PoseStamped, mpc.update_goal)
    rospy.Subscriber("/lunabot_nav/path_generator", Path, mpc.update_path)
        
    cm_vel_pub = rospy.Publisher(
        "lunabot_nav/cmd_vel", TwistStamped, queue_size=100
    )

    while(not rospy.is_shutdown()):
        vel = mpc.calculate_velocity()
        if vel is not None:

            print(vel)
            vel_msg = TwistStamped()
            vel_msg.twist.linear.x = vel[0]
            vel_msg.twist.angular.z = vel[1]

            vel_msg.header.stamp = rospy.Time.now()
            vel_msg.header.frame_id = "base_link"
            cm_vel_pub.publish(vel_msg)
        sleep.sleep()

if __name__ == "__main__":
    main()