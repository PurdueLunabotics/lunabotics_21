#!/usr/bin/env python3
import rospy
import numpy as np

from std_msgs.msg import Int8,Float32
from sensor_msgs.msg import Joy 
from lunabot_msgs.msg import Actuation
from lunabot_msgs.msg import Drivetrain 

class ManualController:
    '''ManualController
    Implements joystick control of lunabotics robot
    '''

    def __init__(self):
        self.subsystems = ['drivetrain', 'actuation', 'excavation', 'deposition']
        self.curr_subsystem = 'drivetrain'

        self._joy_sub = rospy.Subscriber('joy', Joy, self.joy_cb);
        self._drivetrain_pub = rospy.Publisher('cmd_vel', Drivetrain, queue_size=100);
        self._excavation_pub = rospy.Publisher('excavation', Float32, queue_size=100);
        self._deposition_pub = rospy.Publisher('deposition', Int8, queue_size=100);
        self._actuation_pub = rospy.Publisher('actuation', Actuation, queue_size=100);

    def joy_cb(self, joy):
        if joy.buttons[1]: # 'B' button -- switches the active subsystem
            self.stop()
            rospy.logerr("STOPPED")
            return
        else:
            self.main_cb(joy)
    
    def main_cb(self, joy):
        # Joysticks
        drive_msg = Drivetrain()
        drive_msg.left = joy.axes[1]
        drive_msg.right = joy.axes[4]
        self._drivetrain_pub.publish(drive_msg)

        actuation_msg = Actuation()

        # up/down arrows 
        actuation_msg.lead_screw = int(joy.axes[7])

        # left/right bumpers 
        actuation_msg.angle = int(joy.buttons[4] - joy.buttons[5])
        self._actuation_pub.publish(actuation_msg)

        # Triggers
        excavation_msg = Float32()
        excavation_msg.data = joy.axes[2] - joy.axes[5]
        self._excavation_pub.publish(excavation_msg)

        # left/right arrows 
        deposition_msg = Int8()
        deposition_msg.data = int(joy.axes[6])
        self._deposition_pub.publish(deposition_msg)

    def stop(self):
        cmd_vel_stop = Drivetrain()
        cmd_vel_stop.left = 0
        cmd_vel_stop.right = 0
        actuation_stop = Actuation()
        actuation_stop.lead_screw = 0
        actuation_stop.angle = 0
        excavation_stop = Float32()
        excavation_stop.data = 0
        deposition_stop = Int8()
        deposition_stop.data = 0

        self._drivetrain_pub.publish(cmd_vel_stop)
        self._actuation_pub.publish(actuation_stop)
        self._excavation_pub.publish(excavation_stop)
        self._deposition_pub.publish(deposition_stop)

if __name__ == '__main__':
    rospy.init_node('manual_controller_node')

    vs = ManualController()
    rospy.spin()
